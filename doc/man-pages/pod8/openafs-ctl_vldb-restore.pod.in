=head1 NAME

openafs-ctl_vldb-restore, openafs-ctl_vldb-install, openafs-ctl_ptdb-restore,
openafs-ctl_ptdb-install - Restore a ubik db

=head1 SYNOPSIS

=for html
<div class="synopsis">

B<openafs-ctl vldb-restore> S<<< [B<-input>] <I<path>> >>>
    S<<< [B<-backup-suffix> <I<suffix>>] >>> [B<-no-backup>]
    S<<< [B<-dist> (try | skip | required)] >>>
    S<<< [B<-timeout-ms> <I<timeout>>] >>> S<<< [B<-reason> <I<message>>] >>>
    S<<< [B<-ctl-socket> <I<path>>] >>> [B<-quiet>] [B<-progress>]
    [B<-no-progress>] [B<-help>]

B<openafs-ctl vldb-install> S<<< [B<-input>] <I<path>> >>>
    S<<< [B<-backup-suffix> <I<suffix>>] >>> [B<-no-backup>]
    S<<< [B<-dist> (try | skip | required)] >>>
    S<<< [B<-timeout-ms> <I<timeout>>] >>> S<<< [B<-reason> <I<message>>] >>>
    S<<< [B<-ctl-socket> <I<path>>] >>> [B<-quiet>] [B<-progress>]
    [B<-no-progress>] [B<-help>]

B<openafs-ctl ptdb-restore> S<<< [B<-input>] <I<path>> >>>
    S<<< [B<-backup-suffix> <I<suffix>>] >>> [B<-no-backup>]
    S<<< [B<-dist> (try | skip | required)] >>>
    S<<< [B<-timeout-ms> <I<timeout>>] >>> S<<< [B<-reason> <I<message>>] >>>
    S<<< [B<-ctl-socket> <I<path>>] >>> [B<-quiet>] [B<-progress>]
    [B<-no-progress>] [B<-help>]

B<openafs-ctl ptdb-install> S<<< [B<-input>] <I<path>> >>>
    S<<< [B<-backup-suffix> <I<suffix>>] >>> [B<-no-backup>]
    S<<< [B<-dist> (try | skip | required)] >>>
    S<<< [B<-timeout-ms> <I<timeout>>] >>> S<<< [B<-reason> <I<message>>] >>>
    S<<< [B<-ctl-socket> <I<path>>] >>> [B<-quiet>] [B<-progress>]
    [B<-no-progress>] [B<-help>]

=for html
</div>

=head1 DESCRIPTION

The B<openafs-ctl vldb-restore> command restores the given Volume Location
Database (VLDB) file to a locally-running B<vlserver>, replacing the existing
database. The B<openafs-ctl vldb-install> command is the same, but moves the
given database file into place, so the given path no longer exists when the
operation is finished.

The B<openafs-ctl ptdb-restore> and B<openafs-ctl ptdb-install> commands are
the same, except they operate on the Protection Database (PTDB) and the
B<ptserver>.

All of these commands must be run on a dbserver that is currently the sync
site. If the locally-running server process is not the sync site,
B<openafs-ctl> will exit with an error. See the B<openafs-ctl vldb-freeze-run>
option B<-require-sync>.

While the data is being restored, the database is "frozen" in ubik. For details
on what that means, see L<openafs-ctl_vldb-freeze-run(8)>.

If B<openafs-ctl vldb-restore> is run inside B<openafs-ctl vldb-freeze-run>, we
will not create a new freeze, but will use the existing freeze.

=head1 OPTIONS

=over 4

=item B<-input> <I<path>>

The path to the database that should be restored or installed. This database
may be generated by B<openafs-ctl vldb-dump> or other tools, or may be simply a
copy of the VLDB that was obtained when the B<vlserver> was not running.

=item B<-backup-suffix> <I<suffix>>

If this option is given, the B<vlserver> will make a backup copy of the
existing database before it is overwritten by the restored database. If the
original database is located at F</usr/afs/db/vldb.DB0>, then the backup copy
will be available at F</usr/afs/db/vldb.DB0.E<lt>I<suffix>E<gt>>.

You must specify either B<-backup-suffix> or B<-no-backup>.

=item B<-no-backup>

If this option is specified, the B<vlserver> will not make a backup copy of the
existing database when it is overwritten. After the restore process has
finished, the original database will no longer be accessible.

You must specify either B<-backup-suffix> or B<-no-backup>.

=item B<-dist> (try | skip | required)

By default, after the new database is restored, the B<vlserver> will
immediately attempt to distribute the new database to other remote dbservers.
If it fails to distribute the db to any sites, a warning will be printed, but
the database will still be considered successful (and the B<vlserver> will
periodically try to sync the database in the background, as ubik normally
does).

If this option is specified, this behavior can be changed:

=over 4

=item try

If C<try> is specified, there is no change in behavior. This is the default.

=item skip

If C<skip> is specified, the B<vlserver> will not try to distribute the new db
when it is installed. But the B<vlserver> will periodically try to sync the
database to remote dbservers in the background, like normal.

=item required

If C<required> is specified, B<openafs-ctl vldb-restore> will fail with an
error if the B<vlserver> fails to distribute the new db to any remote
dbservers. If B<openafs-ctl vldb-restore> is not being run inside
B<openafs-ctl vldb-freeze-restore>, this means that the freeze will be aborted
and the restore process has effectively failed with an error. However, this
does not necessarily mean that the restored database will be reverted back to
the original database. See B<openafs-ctl vldb-freeze-run> for details.

=back

=include fragments/openafs-ctl-options-freeze.pod

=include fragments/openafs-ctl-options.pod

=include fragments/common-options-progress.pod

=back

=head1 EXAMPLES

    % openafs-ctl vldb-restore /tmp/foo.DB0 -no-backup
    Freezing database... done (freezeid 1, db 15895059050000000.3).
    Making copy of /tmp/foo.DB0... done.
    Installing db /usr/afs/db/vldb.DB0.TMP... done.
    Distributing db... done.
    Ending freeze... done.

    Restored ubik database from /tmp/foo.DB0

=head1 PRIVILEGE REQUIRED

Callers must be able to open the unix domain socket for the relevant daemon
process. By default, this is a socket in F</usr/afs/local>, and the caller must
be the local superuser C<root>.

=head1 SEE ALSO

L<openafs-ctl(8)>,
L<openafs-ctl_vldb-freeze-run(8)>,
L<openafs-ctl_vldb-freeze-dist(8)>

=head1 COPYRIGHT

Copyright 2021 Andrew Deason <adeason@sinenomine.net>.

This documentation is covered by the BSD License as written in the doc/LICENSE
file. This man page was written by Andrew Deason for OpenAFS.
